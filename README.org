* 4clojure.el
  Open and evaluate [[http://www.4clojure.com/][4clojure]] questions.
** Install
   Use `M-x package-install RET 4clojure` to install. Make sure you have
   the [[http://melpa.milkbox.net/][MELPA]] package archive enabled in your init.el or .emacs and your package
   contents are up to date (use `M-x package-refresh-contents` if you can't
   find the 4clojure package and you've added MELPA to your package archives.
** Usage
   1. To open a specific problem:
    `M-x 4clojure-open-question RET 2` opens question 2.
   2. To check your answers:
    `M-x 4clojure-check-answers`
   3. To open the next question (opens the first if you're not in a 4clojure buffer):
    `M-x 4clojure-next-question`
   4. To open the previous question (opens the first if you're not in a 4clojure buffer):
    `M-x 4clojure-previous-question`
** Tips and Tricks
*** Start an nREPL connection when you open a question
    If you want to try out your solutions before you submit them, you can run
    them from emacs with nREPL. Make sure you have nrepl installed (`M-x
    package-install nrepl`) and add the following to your .emacs or init.el:
#+BEGIN_SRC emacs-lisp
(require 'nrepl)

(defadvice 4clojure-open-question (around 4clojure-open-question-around)
  "Start an nREPL connection if one hasn't already been started when opening
4clojure questions"
  ad-do-it
  (unless (nrepl-current-repl-buffer)
    (nrepl-jack-in)))
#+END_SRC

    And if you don't want the REPL to open in a new window when it's ready
    (because you can evaluate the Clojure code from the question with `C-x C-e`
    or `C-x C-c`) you can add the following line after the `require`:
#+BEGIN_SRC emacs-lisp
(setq nrepl-pop-to-repl-buffer-on-connect nil)
#+END_SRC

** Helping out
   If you want to help out, great! This is my first emacs plugin, so help is
   much appreciated. Open an issue or check out the TODO list below for some
   ideas on what might need updating/fixing.
** TODO
   - Sessions
     - If you could log in/out then you could choose questions based on what you'd
       already done.
     - It'd also be good to be able to log out, in case you wanted to let
       someone else use your already opened session
   - Better descriptions and messages
     - When the question descriptions and success/failure messages come back
       from 4clojure.com some of them have HTML in them. It'd be great to either
       remove the HTML, or use it to style the comments in emacs.
     - When you mess up the first question and try to submit an answer it says
       "empty input not allowed"; instead it should say "answer not found, did
       you change the first question?" or something similar
** License
Same as Emacs, see the file LICENSE for more info
